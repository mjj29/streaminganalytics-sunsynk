using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementFragment;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;
using com.apama.cumulocity.FindMeasurement;
using com.apama.cumulocity.FindMeasurementResponse;
using com.apama.cumulocity.FindMeasurementResponseAck;
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.Util;
using com.apama.functional.Fn;
using com.apama.functional.Functional;

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action create(string type, string name) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, Fn.partial(devices.checkForManagedObject, [type, name]));
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action checkForManagedObject(string type, string name, sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			if resp.managedObject.name = name {
				deviceId := resp.managedObject.id;
				send self to CREATED_CHANNEL;
				return;
			}
		}
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on ObjectCommitted(reqId=reqId) as oc and not ObjectCommitFailed(reqId=reqId) {
			deviceId := oc.id;
			send self to CREATED_CHANNEL;
		}
		on ObjectCommitFailed(reqId=reqId) as ocf and not ObjectCommitted(reqId=reqId) {
			log "Failure creating managed object: "+ocf.body.valueToString() at ERROR;
		}
		send (<ManagedObject>Fn.setFields(new ManagedObject, {"type":type, "name":name, "params": {"c8y_IsDevice":<any>new dictionary<any, any>}})).withChannelResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;
	}
	integer id;
	string deviceId;
}



monitor DerivedPriceCalculatorMonitor
{
	SunsynkDevices devices;
	action onload()
	{
		monitor.subscribe(SunsynkDevices.CREATED_CHANNEL);
		on SunsynkDevices(id=SunsynkDevices.create("derivedPricing", "derivedPricing")): devices {		
			monitor.subscribe(MeasurementFragment.SUBSCRIBE_CHANNEL);
			getLatestPrices();
			on all MeasurementFragment(type="octopusPrices", valueSeries="currentPrice") as mf { log "Got current price: "+mf.toString(); }
			on all MeasurementFragment(type="sunsynkFlow", valueSeries="gridPower") as mf { log "Got grid flow update: "+mf.toString(); }
			on all MeasurementFragment(type="sunsynkGrid", valueSeries="gridDailyUsage") as mf { log "Got grid flow update: "+mf.toString(); }
			from m in all MeasurementFragment(type="octopusPrices", valueSeries="currentPrice") partition by m.valueFragment retain 1
			from p in all MeasurementFragment(type="sunsynkFlow", valueFragment="sunsynkGrid", valueSeries="gridPower")
			select MeasurementFragment("", "costRate", devices.deviceId, currentTime, m.valueFragment, "currentPriceRate", (p.value*m.value)/100000., "gbp/hr", new dictionary<string, any>) as m {
				log "Sending currentPriceRate "+m.toString();
				send m to MeasurementFragment.SEND_CHANNEL;
			}			
		}
	}
	action getLatestPrices() {
		
		integer reqId := Util.generateReqId();
		monitor.subscribe(FindMeasurementResponse.SUBSCRIBE_CHANNEL);
		Fn.getAllEvents("com.apama.cumulocity.FindMeasurementResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindMeasurementResponseAck", {"reqId":<any>reqId}, handleLatestPrices);
		send FindMeasurement(reqId, {"type":"octopusPrices", "valueFragmentSeries":"currentPrice", "dateFrom":(currentTime-(24.*3600.)).toString(), "dateTo":currentTime.toString() }) to FindMeasurement.SEND_CHANNEL;
	}
	action handleLatestPrices(sequence<FindMeasurementResponse> responses)
	{
		monitor.unsubscribe(FindMeasurementResponse.SUBSCRIBE_CHANNEL);
		FindMeasurementResponse r;
		for r in responses {
			MeasurementFragment f;
			for f in r.measurement.getFragments() {
				send f to MeasurementFragment.SUBSCRIBE_CHANNEL;
			}
		}
	}
}




