/** Basic event definitions */
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.MeasurementFragment;
using com.apama.cumulocity.FindMeasurement;
using com.apama.cumulocity.FindMeasurementResponse;
using com.apama.cumulocity.FindMeasurementResponseAck;

using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.FindAlarm;
using com.apama.cumulocity.FindAlarmResponse;
using com.apama.cumulocity.FindAlarmResponseAck;

using com.apama.cumulocity.Event;
using com.apama.cumulocity.FindEvent;
using com.apama.cumulocity.FindEventResponse;
using com.apama.cumulocity.FindEventResponseAck;

using com.apama.cumulocity.Operation;
using com.apama.cumulocity.FindOperation;
using com.apama.cumulocity.FindOperationResponse;
using com.apama.cumulocity.FindOperationResponseAck;

using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.SendEmail;
using com.apama.cumulocity.FindTenantOptions;
using com.apama.cumulocity.FindTenantOptionsResponse;
using com.apama.cumulocity.TenantOption;

/** Miscellaneous utilities */
using com.apama.cumulocity.Util;
using com.apama.util.AnyExtractor;

event SunsynkConfiguration {
	constant string CREATED_CHANNEL := "SunsynkConfiguration.created";
	static action create(string category, sequence<string> options) returns integer
	{
		SunsynkConfiguration config := new SunsynkConfiguration;
		config.id := integer.getUnique();
		monitor.subscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on FindTenantOptionsResponse(reqId=reqId) as resp {
			monitor.unsubscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
			TenantOption t;
			for t in resp.options {
				string k;
				for k in options {
					if t.key = k {
						config.options[k] := t.value;
					}
				}
			}
			string k;
			for k in options {
				if not config.options.hasKey(k) {
					log "Error, missing configuration, define the following tenant options in the "+category+" category: "+options.toString() at ERROR;
					return;
				}
			}
			
			send config to CREATED_CHANNEL;
		}
		send FindTenantOptions(reqId, false, category, "", new dictionary<string, string>) to FindTenantOptions.SEND_CHANNEL;
		return config.id;
	}
	integer id;
	dictionary<string, string> options;
}


monitor GenerationPredictor {
	/** Initialize the application */
	SunsynkConfiguration config;
	action onload() {
		on SunsynkConfiguration(id=SunsynkConfiguration.create("apamax.sunsynk", ["username", "password", "inverterId", "notificationEmail"])): config {
			on all MeasurementFragment(type="weatherData", valueFragment="weatherForecast", valueSeries="sunshine_duration") as mf {
				float percentage := 10.;
				if mf.value > 0. {
					percentage := float.max(10., 60.-(2.490*mf.value)/2000.);
				}
				log "Predict we should charge to "+percentage.toString();
				send SendEmail("Setting charge percentange to "+percentage.toString(), 
				"Setting charge percentage to "+percentage.toString(),
				"", [config.options["notificationEmail"]], 
				new sequence<string>, "",
				new dictionary<string, string>) to SendEmail.SEND_CHANNEL;
			}
		}
	}
}