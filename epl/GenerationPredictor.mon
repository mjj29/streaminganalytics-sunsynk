/** Basic event definitions */
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;

using com.apama.cumulocity.MeasurementFragment;


using com.apama.cumulocity.Operation;

using com.apama.cumulocity.SendEmail;
using com.apama.cumulocity.FindTenantOptions;
using com.apama.cumulocity.FindTenantOptionsResponse;
using com.apama.cumulocity.TenantOption;

/** Miscellaneous utilities */
using com.apama.cumulocity.Util;
using com.apama.util.AnyExtractor;
using com.apama.functional.Fn;

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action find(string type) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, devices.setDevices);
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action setDevices(sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			log "Found Managed Object "+resp.managedObject.toString();
			devices.append(resp.managedObject);
		}
		send self to CREATED_CHANNEL;
	}
	integer id;
	sequence<ManagedObject> devices;
}

event SunsynkConfiguration {
	constant string CREATED_CHANNEL := "SunsynkConfiguration.created";
	static action create(string category, sequence<string> options) returns integer
	{
		SunsynkConfiguration config := new SunsynkConfiguration;
		config.id := integer.getUnique();
		monitor.subscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on FindTenantOptionsResponse(reqId=reqId) as resp {
			monitor.unsubscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
			TenantOption t;
			for t in resp.options {
				string k;
				for k in options {
					if t.key = k {
						config.options[k] := t.value;
					}
				}
			}
			string k;
			for k in options {
				if not config.options.hasKey(k) {
					log "Error, missing configuration, define the following tenant options in the "+category+" category: "+options.toString() at ERROR;
					return;
				}
			}
			
			send config to CREATED_CHANNEL;
		}
		send FindTenantOptions(reqId, false, category, "", new dictionary<string, string>) to FindTenantOptions.SEND_CHANNEL;
		return config.id;
	}
	integer id;
	dictionary<string, string> options;
}


monitor GenerationPredictor {
	/** Initialize the application */
	SunsynkConfiguration config;
	SunsynkDevices devices;
	action onload() {
		monitor.subscribe(SunsynkConfiguration.CREATED_CHANNEL);
		monitor.subscribe(SunsynkDevices.CREATED_CHANNEL);
		on SunsynkConfiguration(id=SunsynkConfiguration.create("apamax.sunsynk", ["notificationEmail"])): config {
			on SunsynkDevices(id=SunsynkDevices.find("sunsynkInvertor")): devices {
				float chargeDivisor := 240.;
				float chargeFactor := (<float>devices.devices[0].params["pvMaxPower"])/(<float>devices.devices[0].params["maxBatteryCapacity"]*chargeDivisor);
				float chargeOffset := 100.;
				log "maxPV = "+devices.devices[0].params["pvMaxPower"].valueToString()+" batteryCapacity="+ devices.devices[0].params["maxBatteryCapacity"].valueToString()+" chargeDivisor="+chargeDivisor.toString()+" chargeFactor = "+chargeFactor.toString()+" chargeOffset = "+chargeOffset.toString();
				on all MeasurementFragment(type="weatherData", valueFragment="weatherForecast", valueSeries="sunshine_duration") as mf {
					float percentage := 10.;
					if mf.value > 0. {
						percentage := float.max(10., chargeOffset-(chargeFactor*mf.value));
					}
					log "Predict we should charge to "+percentage.toString();
					send SendEmail("Setting charge percentange to "+percentage.toString(), 
					"Setting charge percentage to "+percentage.toString(),
					"", [config.options["notificationEmail"]], 
					new sequence<string>, "",
					new dictionary<string, string>) to SendEmail.SEND_CHANNEL;
					send Operation("", devices.devices[0].id, Operation.STATUS_PENDING, {
						"SetConfiguration":<any>{
							"parameters": {
								"settings":{
									"time1On": "1",
									"cap1":percentage
								}
							}
						}
					}) to Operation.SEND_CHANNEL;
				}
			}
		}
	}
}