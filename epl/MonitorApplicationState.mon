
using com.apama.cumulocity.GenericRequest;
using com.apama.cumulocity.GenericResponse;
using com.apama.cumulocity.GenericResponseComplete;
using com.apama.cumulocity.Util;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.FindMeasurement;
using com.apama.cumulocity.FindMeasurementResponse;
using com.apama.cumulocity.FindMeasurementResponseAck;
using com.apama.cumulocity.Alarm;

using com.apama.correlator.Component;
using com.apama.functional.Fn;
using com.apama.util.AnyExtractor;
using com.apama.json.JSONPlugin;

using com.softwareag.connectivity.httpclient.HttpTransport;
using com.softwareag.connectivity.httpclient.Request;
using com.softwareag.connectivity.httpclient.Response;

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action find(string type) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, devices.setDevices);
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action setDevices(sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			log "Found Managed Object "+resp.managedObject.toString();
			devices.append(resp.managedObject);
		}
		send self to CREATED_CHANNEL;
	}
	integer id;
	sequence<ManagedObject> devices;
}

monitor MonitorApplicationState {
	action onload() {
		monitor.subscribe(GenericResponse.SUBSCRIBE_CHANNEL);
		monitor.subscribe(FindMeasurementResponse.SUBSCRIBE_CHANNEL);
		// check that the expected set of applications are active in EPLApps and are live in the correlator
		// check the the expected set of devices are producing measurements
		any sunsynkMonitorsAndDevices := {
			"SunsynkDataCollector": {
				"sunsynkInvertor": {
					"sunsynkBattery": {				
						"batteryPower": 15,
						"batteryCharge": 15
					},
					"sunsynkGrid": {
						"gridPower": 15,
						"gridDailyUsage": 15
					},
					"sunsynkHome": {
						"loadPower": 15,
						"loadDailyUsage": 15
					},
					"sunsynkPV": {
						"pvPower": 15,
						"pvDailyGen": 15
					}
				}
			},
			"OctopusPriceCollector": {
				"octopusPrices": new dictionary<string, integer>
			},
			"AgileCharging": new dictionary<string, dictionary<string, integer>>,
			"DerivedPricing": {
				"derivedPricing": new dictionary<string, integer>
			},
			"WeatherDataCollector": {
				"weatherData": {
					"weatherForecast": {
						"sunshine_duration": 60*24,
						"cloud_cover_high": 60*24,
						"cloud_cover_low": 60*24,
						"cloud_cover_mid": 60*24
					}
				}
			},
			"GenerationPredictor": new dictionary<string, dictionary<string, integer>>
		};

		checkMonitorStatus(sunsynkMonitorsAndDevices);
		on all wait(60.*60.) {
			checkMonitorStatus(sunsynkMonitorsAndDevices);
		}
	}
	action checkMonitorStatus(any sunsynkMonitorsAndDevices)
	{		
		integer id := Util.generateReqId();
		send Fn.setFields(new GenericRequest, {"path": "/service/cep/eplfiles", "reqId":id, "method":"GET"}) to GenericRequest.SEND_CHANNEL;
		on GenericResponse(reqId=id) as r and not GenericResponseComplete(reqId=id) {
			sequence<any> eplfiles := AnyExtractor(r.getBody()).getSequence("eplfiles");
			log "Got eplfiles: "+JSONPlugin.toJSON(eplfiles);
			HttpTransport transport := HttpTransport.getOrCreate(Component.getHostname(), Component.getComponentPort());
			Request req := transport.createGETRequest("/correlator/info");
			req.id := integer.getUnique();
			send req to req.channel;
			on Response(id=req.id) as resp {
				sequence<any> monitors := resp.payload.getSequence("monitors");
				log "Got monitors: "+JSONPlugin.toJSON(monitors);
				// for each entry in sunsynkMonitorsAndDevices
				any monitorName;
				for monitorName in sunsynkMonitorsAndDevices.getKeys() {
					log "Checking for EPL App "+monitorName.valueToString();
					any monitorDevices := sunsynkMonitorsAndDevices.getEntry(monitorName);
					// if the epl app with that name exists
					sequence<any> eplfile := <sequence<any>>Fn.filter(eplfiles, Fn.partial(Fn.fieldEqual, ["name", monitorName]));
					if eplfile.size() > 0 {
						log "Found EPL App with active state "+eplfile[0].getEntry("state").valueToString();
						// check that it's active
						assertThat(eplfile[0].getEntry("state")=<any>"active", monitorName, "EPL App is not active");
						// check that a monitor instance with that name exists
						sequence<any> m := <sequence<any>>Fn.filter(monitors, Fn.partial(Fn.fieldEqual, ["name", monitorName]));
						assertThat(m.size()>0, monitorName, "EPL Monitor does not exist for app");
						// for each device in that entry
						any deviceType;
						for deviceType in monitorDevices.getKeys() {
							// check that a device with that type exists
							on SunsynkDevices(id=SunsynkDevices.find(<string>deviceType)) as devices {
								assertThat(devices.devices.size()>0, deviceType, "Device not found for type");
								any deviceFragment;
								for deviceFragment in monitorDevices.getEntry(deviceType).getKeys() {
									any deviceSeries;
									for deviceSeries in monitorDevices.getEntry(deviceType).getEntry(deviceFragment).getKeys() {
										integer timeoutMinutes := <integer> monitorDevices.getEntry(deviceType).getEntry(deviceFragment).getEntry(deviceSeries);
										log "Checking for "+deviceFragment.valueToString()+"/"+deviceSeries.valueToString()+" within "+timeoutMinutes.toString()+" minutes in device "+devices.devices[0].id;
										integer id := Util.generateReqId();
										send FindMeasurement(id, {
											"source":devices.devices[0].id,
											"valueFragmentType":<string>deviceFragment,
											"valueFragmentSeries":<string>deviceSeries,
											"revert":"true",
											"pageSize":"1",
											"currentPage":"1"										
										}) to FindMeasurement.SEND_CHANNEL;
										on FindMeasurementResponse(reqId=id) as resp and not FindMeasurementResponseAck(reqId=id) {
											assertThat(resp.measurement.time > currentTime-timeoutMinutes.toFloat()*60., resp.measurement, "Latest measurement is too old");
										}
										on FindMeasurementResponseAck(reqId=id) as resp and not FindMeasurementResponse(reqId=id) {
											assertThat(false, deviceFragment.valueToString()+"/"+deviceSeries.valueToString(), "Could not find a measurement for fragment/series");
										}
									}
								}
							}
							// for each fragment/series, check that the most recent measurement is at most duration old	
						}
					}
				}
			}
		}
		on GenericResponseComplete(reqId=id) as r and not GenericResponse(reqId=id) {
			assertThat(false, r, "Failed to get EPL files");
		}
	}
	action assertThat(boolean comparison, any object, string message)
	{
		if not comparison {
			log message+": "+object.valueToString() at ERROR;
		}
	}
}
