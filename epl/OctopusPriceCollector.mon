using com.softwareag.connectivity.httpclient.HttpTransport;
using com.softwareag.connectivity.httpclient.HttpOptions;
using com.softwareag.connectivity.httpclient.Request;
using com.softwareag.connectivity.httpclient.Response;
using com.apama.json.JSONPlugin;
using com.apama.correlator.timeformat.TimeFormat;
using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.FindTenantOptions;
using com.apama.cumulocity.FindTenantOptionsResponse;
using com.apama.cumulocity.TenantOption;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.Util;
using com.apama.util.AnyExtractor;
using com.apama.functional.Functional;
using com.apama.functional.Fn;


event SunsynkConfiguration {
	constant string CREATED_CHANNEL := "SunsynkConfiguration.created";
	static action create(string category, sequence<string> options) returns integer
	{
		SunsynkConfiguration config := new SunsynkConfiguration;
		config.id := integer.getUnique();
		monitor.subscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on FindTenantOptionsResponse(reqId=reqId) as resp {
			monitor.unsubscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
			TenantOption t;
			for t in resp.options {
				string k;
				for k in options {
					if t.key = k {
						config.options[k] := t.value;
					}
				}
			}
			string k;
			for k in options {
				if not config.options.hasKey(k) {
					log "Error, missing configuration, define the following tenant options in the "+category+" category: "+options.toString() at ERROR;
					return;
				}
			}
			
			send config to CREATED_CHANNEL;
		}
		send FindTenantOptions(reqId, false, category, "", new dictionary<string, string>) to FindTenantOptions.SEND_CHANNEL;
		return config.id;
	}
	integer id;
	dictionary<string, string> options;
}

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action create(string type, string name) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, Fn.partial(devices.checkForManagedObject, [type, name]));
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action checkForManagedObject(string type, string name, sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			if resp.managedObject.name = name {
				log "Found Managed Object "+resp.managedObject.toString();
				deviceId := resp.managedObject.id;
				send self to CREATED_CHANNEL;
				return;
			}
		}
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on ObjectCommitted(reqId=reqId) as oc and not ObjectCommitFailed(reqId=reqId) {
			deviceId := oc.id;
			log "Created managed Object "+oc.id;
			send self to CREATED_CHANNEL;
		}
		on ObjectCommitFailed(reqId=reqId) as ocf and not ObjectCommitted(reqId=reqId) {
			log "Failure creating managed object: "+ocf.body.valueToString() at ERROR;
		}
		send (<ManagedObject>Fn.setFields(new ManagedObject, {"type":type, "name":name, "params": {"c8y_IsDevice":<any>new dictionary<any, any>}})).withChannelResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;
	}
	integer id;
	string deviceId;
}

event OctopusPriceCollector {
	constant string CREATED_CHANNEL := "OctopusPriceCollector.created";
	constant string API_BASE := "api.octopus.energy";	
	static action create(string username, string password, string inverter) returns integer
	{
		OctopusPriceCollector collector := new OctopusPriceCollector;
		collector.id := integer.getUnique();
		collector.client := HttpTransport.getOrCreate(API_BASE, 443);
		collector.client.createGETRequest("/v1/products/").execute(setProducts);
		return collector.id;
	}
	action setProducts(Response r)
	{
		Functional(r.payload.getAnyOr("results", new sequence<any>))
			.map(Fn.getEntry(code))
		send self to CREATED_CHANNEL;
	}
	HttpTransport client;
}

event ResponseToMeasurement
{
	string source;
	string type;
	string errortype;
	sequence<dictionary<string, sequence<string>>> points;
	action exec(Response r) {
		if r.payload.getBoolean("success") {
			Measurement m := new Measurement;
			dictionary<string, sequence<string>> point;
			for point in points {
				string k;
				for k in point.keys() {
					float value := r.payload.getAnyOr(k, "").valueToString().toFloat();
					sequence<string> resdescr := point[k];
					dictionary<string, MeasurementValue> mvs := m.measurements.getOr(resdescr[0], new dictionary<string, MeasurementValue>);
					mvs[resdescr[1]] := MeasurementValue(value, resdescr[2], new dictionary<string, any>);
					m.measurements[resdescr[0]] := mvs;
				}
			}
			m.time := currentTime;
			m.type := type;
			m.source := source;
			send m to Measurement.SEND_CHANNEL;
		} else {
			Alarm a := new Alarm;
			a.source := source;
			a.severity := "MINOR";
			a.type := errortype;
			a.status := "ACTIVE";
			a.text := r.payload.data.valueToString();
			send a to Alarm.SEND_CHANNEL;
		}
	}
}

monitor OctopusPriceCollectorMonitor
{
	OctopusPriceCollector collector;
	SunsynkConfiguration config;
	SunsynkDevices devices;
	action onload()
	{
		monitor.subscribe(OctopusPriceCollector.CREATED_CHANNEL);
		monitor.subscribe(SunsynkConfiguration.CREATED_CHANNEL);
		monitor.subscribe(SunsynkDevices.CREATED_CHANNEL);
		on SunsynkConfiguration(id=SunsynkConfiguration.create("apamax.octopus", ["apiKey"])): config {
			on SunsynkDevices(id=SunsynkDevices.create("octopusPrices", "octopusPrices")): devices {		
				on OctopusPriceCollector(id=OctopusPriceCollector.create(config.options["apiKey"])): collector {
					on all wait(60.*5.) {
						
					}
				}
			}
		}
	}
	action printResponse(Response r)
	{
		log JSONPlugin.toJSON(r.payload.data) at INFO;
	}
}




