/** Basic event definitions */
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;

using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.MeasurementFragment;
using com.apama.cumulocity.FindMeasurement;
using com.apama.cumulocity.FindMeasurementResponse;
using com.apama.cumulocity.FindMeasurementResponseAck;

using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.FindAlarm;
using com.apama.cumulocity.FindAlarmResponse;
using com.apama.cumulocity.FindAlarmResponseAck;

using com.apama.cumulocity.Event;
using com.apama.cumulocity.FindEvent;
using com.apama.cumulocity.FindEventResponse;
using com.apama.cumulocity.FindEventResponseAck;

using com.apama.cumulocity.Operation;
using com.apama.cumulocity.FindOperation;
using com.apama.cumulocity.FindOperationResponse;
using com.apama.cumulocity.FindOperationResponseAck;

using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;

/** Miscellaneous utilities */
using com.apama.cumulocity.Util;
using com.apama.util.AnyExtractor;
using com.apama.functional.Fn;

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action create(string type, string name, sequence<string> operations) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, Fn.partial(devices.checkForManagedObject, [type, name, operations]));
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action checkForManagedObject(string type, string name, sequence<string> operations, sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			if resp.managedObject.name = name {
				log "Found Managed Object "+resp.managedObject.toString();
				deviceId := resp.managedObject.id;
				send self to CREATED_CHANNEL;
				return;
			}
		}
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on ObjectCommitted(reqId=reqId) as oc and not ObjectCommitFailed(reqId=reqId) {
			deviceId := oc.id;
			log "Created managed Object "+oc.id;
			send self to CREATED_CHANNEL;
		}
		on ObjectCommitFailed(reqId=reqId) as ocf and not ObjectCommitted(reqId=reqId) {
			log "Failure creating managed object: "+ocf.body.valueToString() at ERROR;
		}
		send (<ManagedObject>Fn.setFields(new ManagedObject, {"type":type, "name":name, "params": {"c8y_IsDevice":<any>new dictionary<any, any>, "com_cumulocity_model_Agent":new dictionary<any, any>, "c8y_supportedOperations": operations}})).withChannelResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;
	}
	integer id;
	string deviceId;
}

monitor SendOperationMonitor {
	/** Initialize the application */
	action onload() {
		string date := "2024-09-06";
		string start := "12:00";
		string end := "14:30";
		on SunsynkDevices(id=SunsynkDevices.create("sunsynkInvertor", "sunsynk2208309020", ["PowerUp","SetConfiguration"])) as devices {
			send Operation("", devices.deviceId, "PENDING", {"description":"Powerup on "+date+" from "+start+" to "+end, "PowerUp":<any>{"name":"Set Powerup", "parameters":{"date":date, "start":start, "end":end}}}) to Operation.SEND_CHANNEL;
		}
		on SunsynkDevices(id=SunsynkDevices.create("myEnergi", "myEnergi12245712", ["SetChargeMode", "StopCharging", "BoostNow", "PowerUp"])) as mdevices {
			send Operation("", mdevices.deviceId, "PENDING", {"description":"Powerup on "+date+" from "+start+" to "+end, "PowerUp":<any>{"name":"Set Powerup", "parameters":{"date":date, "start":start, "end":end}}}) to Operation.SEND_CHANNEL;
		}
	}
}