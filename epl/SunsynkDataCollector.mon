using com.softwareag.connectivity.httpclient.HttpTransport;
using com.softwareag.connectivity.httpclient.HttpOptions;
using com.softwareag.connectivity.httpclient.Request;
using com.softwareag.connectivity.httpclient.Response;
using com.apama.json.JSONPlugin;
using com.apama.correlator.timeformat.TimeFormat;
using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.FindTenantOptions;
using com.apama.cumulocity.FindTenantOptionsResponse;
using com.apama.cumulocity.TenantOption;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.Operation;
using com.apama.cumulocity.Util;
using com.apama.cumulocity.SendEmail;
using com.apama.util.AnyExtractor;
using com.apama.functional.Functional;
using com.apama.functional.Fn;

event SunsynkRequest {
	constant string URLBASE := "api.sunsynk.net";
	static action create(string method, string url, any data, string token) returns SunsynkRequest
	{
		SunsynkRequest request := new SunsynkRequest;
		request.headers := {
				"content-type": "application/json",
				"accept": "application/json"
			};
		request.method := method;
		request.url := url;
		request.data := data;
		if token != "" {
			request.headers["Authorization"] := "Bearer "+token;
		}
		
		return request;
	}
 	action execute(action<Response> handler)
 	{
 		HttpTransport transport := HttpTransport.getOrCreate(URLBASE, 443);
 		HttpOptions options := new HttpOptions;
 		options.headers := headers;
 		Request req := transport.createRequest(method, url, data, options);
 		req.execute(handler);
 	}
	string method;
	string url;
	any data;
	dictionary<string, string> headers;
}

event SunsynkConfiguration {
	constant string CREATED_CHANNEL := "SunsynkConfiguration.created";
	static action create(string category, sequence<string> options) returns integer
	{
		SunsynkConfiguration config := new SunsynkConfiguration;
		config.id := integer.getUnique();
		monitor.subscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on FindTenantOptionsResponse(reqId=reqId) as resp {
			monitor.unsubscribe(FindTenantOptionsResponse.SUBSCRIBE_CHANNEL);
			TenantOption t;
			for t in resp.options {
				string k;
				for k in options {
					if t.key = k {
						config.options[k] := t.value;
					}
				}
			}
			string k;
			for k in options {
				if not config.options.hasKey(k) {
					log "Error, missing configuration, define the following tenant options in the "+category+" category: "+options.toString() at ERROR;
					return;
				}
			}
			
			send config to CREATED_CHANNEL;
		}
		send FindTenantOptions(reqId, false, category, "", new dictionary<string, string>) to FindTenantOptions.SEND_CHANNEL;
		return config.id;
	}
	integer id;
	dictionary<string, string> options;
}

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action create(string type, string name, sequence<string> operations) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, Fn.partial(devices.checkForManagedObject, [type, name, operations]));
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action checkForManagedObject(string type, string name, sequence<string> operations, sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			if resp.managedObject.name = name {
				log "Found Managed Object "+resp.managedObject.toString();
				deviceId := resp.managedObject.id;
				send self to CREATED_CHANNEL;
				return;
			}
		}
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on ObjectCommitted(reqId=reqId) as oc and not ObjectCommitFailed(reqId=reqId) {
			deviceId := oc.id;
			log "Created managed Object "+oc.id;
			send self to CREATED_CHANNEL;
		}
		on ObjectCommitFailed(reqId=reqId) as ocf and not ObjectCommitted(reqId=reqId) {
			log "Failure creating managed object: "+ocf.body.valueToString() at ERROR;
		}
		send (<ManagedObject>Fn.setFields(new ManagedObject, {"type":type, "name":name, "params": {"c8y_IsDevice":<any>new dictionary<any, any>, "com_cumulocity_model_Agent":new dictionary<any, any>, "c8y_supportedOperations": operations}})).withChannelResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;
	}
	integer id;
	string deviceId;
}

event SunsynkDataCollector {
	constant string CREATED_CHANNEL := "SunsynkDataCollector.created";
	static action create(string username, string password, string notificationEmail) returns integer
	{
		SunsynkDataCollector collector := new SunsynkDataCollector;
		collector.id := integer.getUnique();
		collector.notificationEmail := notificationEmail;
		SunsynkRequest req := SunsynkRequest.create("POST", "/oauth/token", {
			"username": username,
			"password": password,
			"grant_type": "password",
			"client_id": "csp-web",
			"areaCode": "sunsynk",
			"source": "sunsynk"
		}, "");
		req.execute(collector.setToken);
		// regenerate the token every day
		on all wait(3600.*24.) {
			req.execute(collector.setToken);
		}
		return collector.id;
	}
	action setToken(Response r)
	{
		token := r.payload.getStringOr("data.access_token", "");
		SunsynkRequest.create("GET", "/api/v1/plants?page=1&limit=1", new any, token).execute(setPlantId);
	}
	action setPlantId(Response r)
	{
		plantId := r.payload.getSequence("data.infos")[0].getEntry("id").valueToString();
		SunsynkRequest.create("GET", "/api/v1/inverters?page=1&limit=1&type=-1&status=1", new any, token).execute(setInverterId);
	}
	action setInverterId(Response r)
	{
		inverter := r.payload.getSequence("data.infos")[0].getEntry("sn").valueToString();
		send self to CREATED_CHANNEL;
	}
	action getLoad(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/load/"+inverter+"/realtime?sn="+inverter, new any, token).execute(handler);
	}
	action getGrid(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/grid/"+inverter+"/realtime?sn="+inverter, new any, token).execute(handler);
	}
	action getInput(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/"+inverter+"/realtime/input", new any, token).execute(handler);
	}
	action getOutput(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/"+inverter+"/realtime/output", new any, token).execute(handler);
	}
	action getBattery(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/battery/"+inverter+"/realtime?sn="+inverter+"&lan=en", new any, token).execute(handler);
	}

	action getFlow(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/"+inverter+"/flow", new any, token).execute(handler);
	}
	action getInverter(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/inverter/"+inverter, new any, token).execute(handler);
	}
	action getSettings(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/common/setting/"+inverter+"/read", new any, token).execute(handler);
	}
	action setOneOffChargePeriod(string date, string start, string end)
	{
		float startDay := TimeFormat.parseTimeWithTimeZone("yyyy-MM-dd", date, "Europe/London");
		float todayDay := TimeFormat.parseTimeWithTimeZone("yyyy-MM-dd", TimeFormat.formatWithTimeZone(currentTime, "yyyy-MM-dd", "Europe/London"), "Europe/London");
		string emailMessage := "";
		log "startDay: "+startDay.toString()+" todayDay: "+todayDay.toString()+" currentTime: "+currentTime.toString();
		if startDay < todayDay {
			log "setOneOffChargePeriod asked for a day in the past: "+date at ERROR;
		} else if startDay <= currentTime {
			sendNotificationEmail("Setting PowerUp for today at "+start+" until "+end);
			setSettings({
				"sellTime3": start,
				"sellTime4": end,
				"time3On": "1",
				"time4On": "0",
				"cap3": "100",
				"cap4": "4"});
		} else {
			sendNotificationEmail("Setting PowerUp for "+date+" at "+start+" until "+end);
			log "on wait "+(startDay-currentTime).toString();
			on wait (startDay-currentTime) {
				sendNotificationEmail("Enabling PowerUp at "+start+" until "+end);
				setSettings({
					"sellTime3": start,
					"sellTime4": end,
					"time3On": "1",
					"time4On": "0",
					"cap3": "100",
					"cap4": "4"});
			}
		}
		on wait(startDay+(3600.*24.)-currentTime) {
			sendNotificationEmail("Disabling PowerUp");
			setSettings({
				"time3On": "0",
				"time4On": "0",
				"cap3": "4",
				"cap4": "4"});
		}
	}
	/**
	newSettings = {
		"batteryRestartCap":"4",
		"batteryLowCap":"4",
		"batteryShutdownCap":"4",
		"cap1": "20",
		"cap2": "4",
		"cap3": "4",
		"cap4": "4",
		"cap5": "4",
		"cap6": "20",
		"time1On": "1",
		"time2On": "0",
		"time3On": "0",
		"time4On": "0",
		"time5On": "0",
		"time6On": "1",
		"sellTime3": "11:50",
		"sellTime4": "14:10",
		"sellTime5": "18:18"
	}
	*/
	action setSettings(dictionary<string, string> newSettings)
	{
		SunsynkRequest.create("POST", "/api/v1/common/setting/"+inverter+"/set", newSettings, token).execute(_);
	}
	action getMessages(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/message/count", new any, token).execute(handler);
	}
	action getWeather(action<Response> handler, string date, string long, string lat)
	{
		SunsynkRequest.create("GET", "/api/v1/weather?lan=en&date="+date+"&lonLat="+long+","+lat, new any, token).execute(handler);
	}
	action getPlant(action<Response> handler)
	{
		SunsynkRequest.create("GET", "/api/v1/plant/"+plantId+"?lan=en", new any, token).execute(handler);
	}
	action sendNotificationEmail(string message)
	{
		SendEmail se := SendEmail(message, "Sunsynk control event for inverter "+inverter+":<br/>"+message+"<br/>Yours etc,</br>Sunsynk management bot.", "", [notificationEmail], new sequence<string>, "", new dictionary<string, string>);
		log se.toString();
		send se to SendEmail.SEND_CHANNEL;
	}
	action _(Response r) { }
	integer id;
	string inverter;
	string token;
	string notificationEmail;
	string plantId;
}

event ResponseToMeasurement
{
	string source;
	string type;
	string errortype;
	sequence<dictionary<string, sequence<string>>> points;
	action exec(Response r) {
		if r.payload.getBoolean("success") {
			Measurement m := new Measurement;
			dictionary<string, sequence<string>> point;
			for point in points {
				string k;
				for k in point.keys() {
					float value := r.payload.getAnyOr(k, "").valueToString().toFloat();
					sequence<string> resdescr := point[k];
					dictionary<string, MeasurementValue> mvs := m.measurements.getOr(resdescr[0], new dictionary<string, MeasurementValue>);
					mvs[resdescr[1]] := MeasurementValue(value, resdescr[2], new dictionary<string, any>);
					m.measurements[resdescr[0]] := mvs;
				}
			}
			m.time := currentTime;
			m.type := type;
			m.source := source;
			send m to Measurement.SEND_CHANNEL;
		} else {
			Alarm a := new Alarm;
			a.source := source;
			a.severity := "MINOR";
			a.type := errortype;
			a.status := "ACTIVE";
			a.text := r.payload.data.valueToString();
			send a to Alarm.SEND_CHANNEL;
		}
	}
}

monitor SunsynkDataCollectorMonitor
{
	SunsynkDataCollector collector;
	SunsynkConfiguration config;
	SunsynkDevices devices;
	integer inverterMaxRate;
	float maxBatteryCapacity;
	string timezone;
	float pvMaxPower;
	float lat;
	float long;
	action onload()
	{
		monitor.subscribe(SunsynkDataCollector.CREATED_CHANNEL);
		monitor.subscribe(SunsynkConfiguration.CREATED_CHANNEL);
		monitor.subscribe(SunsynkDevices.CREATED_CHANNEL);
		on SunsynkConfiguration(id=SunsynkConfiguration.create("apamax.sunsynk", ["username", "password", "inverterId", "notificationEmail"])): config {
			on SunsynkDataCollector(id=SunsynkDataCollector.create(config.options["username"], config.options["password"], config.options["notificationEmail"])): collector {
				on SunsynkDevices(id=SunsynkDevices.create("sunsynkInvertor", "sunsynk"+collector.inverter, ["PowerUp","SetConfiguration"])): devices {
					log "Starting sunsynk monitoring username "+config.options["username"]+" inverterId "+collector.inverter;		
					collector.getInverter(parseInverterConfig);
					collector.getPlant(parsePlantConfig);
					collector.getBattery(parseBatteryConfig);
					on all wait(60.*5.) {
						collector.getFlow(flowToMeasurement);
						collector.getLoad(ResponseToMeasurement(devices.deviceId, "sunsynkLoad", "loadError", [{"data.dailyUsed":["sunsynkHome", "loadDailyUsage", "kW"]}]).exec);
						collector.getGrid(ResponseToMeasurement(devices.deviceId, "sunsynkGrid", "gridError", [{"data.etodayFrom":["sunsynkGrid", "gridDailyUsage", "kW"]}]).exec);
						collector.getInput(ResponseToMeasurement(devices.deviceId, "sunsynkPV", "pvError", [{"data.etoday":["sunsynkPV", "pvDailyGen", "kW"]}]).exec);
					}
					monitor.subscribe(Operation.SUBSCRIBE_CHANNEL);
					on all Operation(source=devices.deviceId, status="PENDING") as op {
						op.status := "EXECUTING";
						log op.toString();
						send op to Operation.SEND_CHANNEL;
						AnyExtractor ae := AnyExtractor(op.params);
						if op.params.hasKey("PowerUp") {
							collector.setOneOffChargePeriod(ae.getString("PowerUp.parameters.date"), ae.getString("PowerUp.parameters.start"), ae.getString("PowerUp.parameters.end"));
						}
						else if op.params.hasKey("SetConfiguration") {
							collector.setSettings(<dictionary<string, string>> ae.getAny("PowerUp.parameters.settings"));
						}
						else {
							log "Unknown operation "+op.toString() at ERROR;
						}
						op.status := "SUCCESSFUL";
						log op.toString();
						send op to Operation.SEND_CHANNEL;
					}
				}
			}
		}
	}
	action parsePlantConfig(Response r)
	{
		pvMaxPower := r.payload.getFloat("data.realtime.totalPower");
		timezone := r.payload.getString("data.timezone.code");
		lat := r.payload.getFloat("data.lat");
		long := r.payload.getFloat("data.lon");
		log "Max PV power: "+pvMaxPower.toString()+" kW";
		log "Timezone: "+timezone+" location: "+lat.toString()+","+long.toString();
	}
	action parseInverterConfig(Response r)
	{
		inverterMaxRate := r.payload.getInteger("data.ratePower");
		log "Max inverter rated power: "+inverterMaxRate.toString()+" W";
	}
	action parseBatteryConfig(Response r)
	{
		float capacityAmpHours := r.payload.getString("data.capacity").toFloat();
		float voltage := r.payload.getString("data.voltage").toFloat();
		maxBatteryCapacity := capacityAmpHours * voltage / 1000.;
		log "Max battery capacity: "+maxBatteryCapacity.toString()+" kWh";
	}
	action flowToMeasurement(Response r)
	{
		if r.payload.getBoolean("success") {
			float loadPower := r.payload.getFloat("data.homeLoadPower");
			float battPower := r.payload.getFloat("data.battPower");
			if r.payload.getBoolean("data.toBat") {
				battPower := -battPower;
			}
			float pvPower := 0.0;
			sequence<any> pv := r.payload.getSequence("data.pv");
			any a;
			for a in pv {
				dictionary<any, any> d := <dictionary<any, any>> a;
				if <boolean> d["toInv"] = true {
					pvPower := d["power"].valueToString().toFloat();
				}
			}
			
			
			float gridPower := r.payload.getFloat("data.gridOrMeterPower");
			if r.payload.getBoolean("data.toGrid") {
				gridPower := -gridPower;
			}
			float battCharge := r.payload.getFloat("data.soc");
			Measurement m := new Measurement;
			m.measurements := {
				"sunsynkBattery": {
					"batteryCharge": MeasurementValue(battCharge, "percent", new dictionary<string, any>),
					"batteryPower": MeasurementValue(battPower, "W", new dictionary<string, any>)
				},
				"sunsynkPV": {
					"pvPower": MeasurementValue(pvPower, "W", new dictionary<string, any>)
				},
				"sunsynkGrid": {
					"gridPower": MeasurementValue(gridPower, "W", new dictionary<string, any>)
				},
				"sunsynkHome": {
					"loadPower": MeasurementValue(loadPower, "W", new dictionary<string, any>)
				}
			};
			m.time := currentTime;
			m.type := "sunsynkFlow";
			m.source := devices.deviceId;
			send m to Measurement.SEND_CHANNEL;
		} else {
			Alarm a := new Alarm;
			a.source := devices.deviceId;
			a.severity := "MINOR";
			a.type := "flowError";
			a.status := "ACTIVE";
			a.text := r.payload.data.valueToString();
			send a to Alarm.SEND_CHANNEL;
		}
	}
	action printResponse(Response r)
	{
		log JSONPlugin.toJSON(r.payload.data) at INFO;
	}
}