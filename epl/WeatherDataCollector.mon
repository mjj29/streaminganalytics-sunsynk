using com.softwareag.connectivity.httpclient.HttpTransport;
using com.softwareag.connectivity.httpclient.HttpOptions;
using com.softwareag.connectivity.httpclient.Request;
using com.softwareag.connectivity.httpclient.Response;
using com.apama.json.JSONPlugin;
using com.apama.correlator.timeformat.TimeFormat;
using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementFragment;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.FindTenantOptions;
using com.apama.cumulocity.FindTenantOptionsResponse;
using com.apama.cumulocity.TenantOption;
using com.apama.cumulocity.FindManagedObject;
using com.apama.cumulocity.FindManagedObjectResponse;
using com.apama.cumulocity.FindManagedObjectResponseAck;
using com.apama.cumulocity.ManagedObject;
using com.apama.cumulocity.ObjectCommitted;
using com.apama.cumulocity.ObjectCommitFailed;
using com.apama.cumulocity.Util;
using com.apama.util.AnyExtractor;
using com.apama.functional.Functional;
using com.apama.functional.Fn;

event SunsynkDevices {
	constant string CREATED_CHANNEL := "SunsynkDevices.created";
	static action create(string type, string name) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, Fn.partial(devices.checkForManagedObject, [type, name]));
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action checkForManagedObject(string type, string name, sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			if resp.managedObject.name = name {
				log "Found Managed Object "+resp.managedObject.toString();
				deviceId := resp.managedObject.id;
				send self to CREATED_CHANNEL;
				return;
			}
		}
		monitor.subscribe(ManagedObject.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		on ObjectCommitted(reqId=reqId) as oc and not ObjectCommitFailed(reqId=reqId) {
			deviceId := oc.id;
			log "Created managed Object "+oc.id;
			send self to CREATED_CHANNEL;
		}
		on ObjectCommitFailed(reqId=reqId) as ocf and not ObjectCommitted(reqId=reqId) {
			log "Failure creating managed object: "+ocf.body.valueToString() at ERROR;
		}
		send (<ManagedObject>Fn.setFields(new ManagedObject, {"type":type, "name":name, "params": {"c8y_IsDevice":<any>new dictionary<any, any>}})).withChannelResponse(reqId, new dictionary<string, string>) to ManagedObject.SEND_CHANNEL;
	}
	static action find(string type) returns integer
	{
		SunsynkDevices devices := new SunsynkDevices;
		devices.id := integer.getUnique();
		monitor.subscribe(FindManagedObjectResponse.SUBSCRIBE_CHANNEL);
		integer reqId := Util.generateReqId();
		Fn.getAllEvents("com.apama.cumulocity.FindManagedObjectResponse", {"reqId":<any>reqId}, "com.apama.cumulocity.FindManagedObjectResponseAck", {"reqId":<any>reqId}, devices.setDevices);
		send FindManagedObject(reqId, "", {"type":type}) to FindManagedObject.SEND_CHANNEL;
		return devices.id;
	}
	action setDevices(sequence<FindManagedObjectResponse> responses) {
		FindManagedObjectResponse resp;
		for resp in responses {
			log "Found Managed Object "+resp.managedObject.toString();
			devices.append(resp.managedObject);
		}
		send self to CREATED_CHANNEL;
	}
	integer id;
	string deviceId;
	sequence<ManagedObject> devices;
}

event WeatherDataCollector {
	constant string API_BASE := "api.open-meteo.com";	
	static action create(string latlong, string timezone) returns WeatherDataCollector
	{
		WeatherDataCollector collector := new WeatherDataCollector;
		sequence<string> latlongseq := ",".split(latlong);
		collector.lat := latlongseq[0];
		collector.long := latlongseq[1];
		collector.timezone := timezone;
		return collector;
	}
	action getDailyWeatherPrediction(action<Response> handler) {
		HttpTransport client := HttpTransport.getOrCreate(API_BASE, 443);
		client.createGETRequest("/v1/forecast?latitude="+lat+"&longitude="+long+"&hourly=cloud_cover_low,cloud_cover_mid,cloud_cover_high&daily=sunshine_duration&timezone="+timezone.replaceAll("/", "%2F")+"&forecast_days=2").execute(handler);
	}
	string lat;
	string long;
	string timezone;
}


monitor WeatherDataCollectorMonitor
{
	WeatherDataCollector collector;
	SunsynkDevices sunsynkDevices;
	SunsynkDevices devices;
	action onload()
	{
		monitor.subscribe(SunsynkDevices.CREATED_CHANNEL);
		on SunsynkDevices(id=SunsynkDevices.find("sunsynkInvertor")): sunsynkDevices {
			string loc := sunsynkDevices.devices[0].position["lat"]+","+sunsynkDevices.devices[0].position["lng"];
			on SunsynkDevices(id=SunsynkDevices.create("weatherData", "weatherData"+loc)): devices {		
				WeatherDataCollector collector := WeatherDataCollector.create(loc, sunsynkDevices.devices[0].params["timezone"]);
				collector.getDailyWeatherPrediction(weatherToMeasurement);
				on all at(0, 22, *, *, *) {
					collector.getDailyWeatherPrediction(weatherToMeasurement);
				}
			}
		}
	}
	action weatherToMeasurement(Response r)
	{
		sequence<any> days := r.payload.getSequence("daily.time");
		sequence<any> sunshine_duration := r.payload.getSequence("daily.sunshine_duration");
		integer i := 0;
		while i < days.size() {
			float time := TimeFormat.parseTimeWithTimeZone("yyyy-MM-dd", <string>days[i], collector.timezone);
			if time > currentTime {
				send MeasurementFragment("", "weatherData", devices.deviceId, 
				                         time,
				                         "weatherForecast", "sunshine_duration", 
				                         <float> sunshine_duration[i], r.payload.getString("daily_units.sunshine_duration"), 
				                         new dictionary<string, any>) to MeasurementFragment.SEND_CHANNEL;
			}
			i := i + 1;
		}
		
		sequence<any> timestamps := r.payload.getSequence("hourly.time");
		i := 0;
		while i < timestamps.size() {
			float time := TimeFormat.parseTimeWithTimeZone("yyyy-MM-dd'T'HH:mm", <string>timestamps[i], collector.timezone);
			if time > currentTime {
				Measurement m := new Measurement;
				m.time := time;
				m.type := "weatherData";
				m.source := devices.deviceId;
				dictionary<string, MeasurementValue> measurements := new dictionary<string, MeasurementValue>;
				
				string cloud_cover_type;
				for cloud_cover_type in ["cloud_cover_low", "cloud_cover_high", "cloud_cover_mid"] {
					string cloud_units := r.payload.getString("hourly_units."+cloud_cover_type);
					sequence<any> cloud_cover := r.payload.getSequence("hourly."+cloud_cover_type);
					measurements[cloud_cover_type] := MeasurementValue(cloud_cover[i].valueToString().toFloat(), cloud_units, 
				                         new dictionary<string, any>);
				}
				m.measurements["weatherForecast"] := measurements;
				send m to Measurement.SEND_CHANNEL;
			}
			i := i + 1;
		}
	}
	action printResponse(Response r)
	{
		log JSONPlugin.toJSON(r.payload.data) at INFO;
	}
}




